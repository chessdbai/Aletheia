<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Artemis</name>
    </assembly>
    <members>
        <member name="T:Artemis.GamePointer">
            <summary>
            Refers to a specific move or range of moves from an existing game.
            </summary>
        </member>
        <member name="M:Artemis.GamePointer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.GamePointer"/> struct.
            </summary>
            <param name="gameId">The ID of the game.</param>
            <param name="plyReference">The field event.</param>
        </member>
        <member name="P:Artemis.GamePointer.GameId">
            <summary>
            Gets the ID of this game.
            </summary>
        </member>
        <member name="P:Artemis.GamePointer.PlyReference">
            <summary>
            Gets the reference to the ply. Specification to come.
            </summary>
        </member>
        <member name="T:Artemis.IMotifAnalyzer">
            <summary>
            An analyzer to find motifs from a game.
            </summary>
        </member>
        <member name="M:Artemis.IMotifAnalyzer.FindMotifsAsync(Artemis.Model.FlatGame)">
            <summary>
            Find motifs from a chess game.
            </summary>
            <param name="game">The PGN game.</param>
            <returns>Any found motifs.</returns>
        </member>
        <member name="T:Artemis.ISingularMotifAnalyzer">
            <summary>
            An interface used for motif analyzers capable of finding motifs in single positions,
            not just games.
            </summary>
        </member>
        <member name="M:Artemis.ISingularMotifAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition)">
            <summary>
            Finds motifs in a given position.
            </summary>
            <param name="position">The position to look for motifs in.</param>
            <returns>An awaitable task with a result containing the list of identified motifs.</returns>
        </member>
        <member name="T:Artemis.Model.DefaultDictionary`2">
            <summary>
            A dictionary that falls back to a default value or a
            default value function if the key is not found.
            </summary>
            <typeparam name="TKey">The type of key of the dictionary.</typeparam>
            <typeparam name="TValue">The type of value of the dictionary.</typeparam>
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.DefaultDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.DefaultDictionary`2"/> class.
            </summary>
            <param name="defaultValue">The default value to use if they key is not found.</param>
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.DefaultDictionary`2"/> class.
            </summary>
            <param name="defaultSupplier">A fallback function to use if the key is not found in the dictionary.</param>
        </member>
        <member name="P:Artemis.Model.DefaultDictionary`2.IsReadOnly">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="P:Artemis.Model.DefaultDictionary`2.Count">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="P:Artemis.Model.DefaultDictionary`2.Keys">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="P:Artemis.Model.DefaultDictionary`2.Values">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="P:Artemis.Model.DefaultDictionary`2.Item(`0)">
            <summary>
            Gets or sets a value from this dictionary.
            </summary>
            <param name="key">The key element to look for.</param>
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.Add(`0,`1)">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.Clear">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.ContainsKey(`0)">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.Remove(`0)">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.GetEnumerator">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="M:Artemis.Model.DefaultDictionary`2.GetHashCode">
            <inheritdoc cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="T:Artemis.Model.FlatGame">
            <summary>
            A preprocessed game ready for analysis.
            </summary>
        </member>
        <member name="M:Artemis.Model.FlatGame.#ctor(System.String,ChessBot.Pgn.Model.PgnGame)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.FlatGame"/> struct for an unoccupied square.
            </summary>
            <param name="gameId">The square on the board.</param>
            <param name="game">The parsed <see cref="T:ChessBot.Pgn.Model.PgnGame" />.</param>
        </member>
        <member name="P:Artemis.Model.FlatGame.GameId">
            <summary>
            Gets the game ID.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatGame.Game">
            <summary>
            Gets the un-processed PGN game.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatGame.Positions">
            <summary>
            Gets list of positions.
            </summary>
        </member>
        <member name="M:Artemis.Model.FlatGame.FlattenGame(ChessBot.Pgn.Model.PgnGame)">
            <summary>
            Converts a PGN game to a list of flat positions.
            </summary>
            <param name="game">The PGN game.</param>
            <returns>The list of flat positions.</returns>
            <exception cref="T:System.InvalidOperationException">If the pgn text refers to a move that is not possible.</exception>
        </member>
        <member name="T:Artemis.Model.FlatMove">
            <summary>
            A flattened move notation.
            </summary>
        </member>
        <member name="M:Artemis.Model.FlatMove.#ctor(Artemis.Model.Square,Artemis.Model.Square,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.FlatMove"/> struct for an unoccupied square.
            </summary>
            <param name="fromSquare">The departure square.</param>
            <param name="toSquare">The destination square.</param>
            <param name="uci">The UCI notation.</param>
            <param name="san">The SAN notation.</param>
        </member>
        <member name="P:Artemis.Model.FlatMove.FromSquare">
            <summary>
            Gets the departure square.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatMove.ToSquare">
            <summary>
            Gets the destination square.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatMove.Uci">
            <summary>
            Gets the <a href="https://en.wikipedia.org/wiki/Universal_Chess_Interface">UCI</a> representation of this move.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatMove.San">
            <summary>
            Gets the San representation of this move.
            </summary>
        </member>
        <member name="T:Artemis.Model.FlatPosition">
            <summary>
            Represents a specific board position at the start of the game,
            or after any of the plys have been played.
            </summary>
        </member>
        <member name="M:Artemis.Model.FlatPosition.#ctor(ChessBot.Logic.Board,System.String,ChessBot.Logic.Moves.Move,ChessBot.Logic.Moves.Move,ChessBot.Logic.Board)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.FlatPosition"/> struct.
            </summary>
            <param name="board">The logical chess board.</param>
            <param name="plyRef">The ply reference string.</param>
            <param name="previousMove">The previous move.</param>
            <param name="nextMove">The next move.</param>
            <param name="previousBoard">The previous board.</param>
        </member>
        <member name="P:Artemis.Model.FlatPosition.OriginalBoard">
            <summary>
            Gets the state of the board as a logical board object.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatPosition.PreviousMove">
            <summary>
            Gets the previous move. If this is the first move in the line,
            returns null.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatPosition.NextMove">
            <summary>
            Gets the next move. If this is the last move in the line,
            returns null.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatPosition.PreviousBoard">
            <summary>
            Gets the previous board. If this is the first move in the line,
            return null.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatPosition.PlyReference">
            <summary>
            Gets the reference to the ply.
            </summary>
        </member>
        <member name="P:Artemis.Model.FlatPosition.Item(Artemis.Model.Square)">
            <summary>
            Gets the value of this square in the current position.
            </summary>
            <param name="square">The square to retrieve.</param>
            <returns>A position square object for the given square.</returns>
        </member>
        <member name="P:Artemis.Model.FlatPosition.Item(Artemis.Sequences.Sequence{Artemis.Model.Square})">
            <summary>
            Gets the sequence of position squares from a sequence of squares.
            </summary>
            <param name="squareSequence">The square sequence to retrieve.</param>
            <returns>A position square sequence for the given square sequence.</returns>
        </member>
        <member name="T:Artemis.Model.LogicExtensions">
            <summary>
            Extension methods for converting to and from the ChessBot.Logical data model.
            </summary>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToLogicalFile(Artemis.Model.SquareFile)">
            <summary>
            Converts a SquareFile to its Logical File counterpart.
            </summary>
            <param name="f">The SquareFile.</param>
            <returns>The logical file.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToLogicalRank(Artemis.Model.SquareRank)">
            <summary>
            Converts a SquareRank to its Logical Rank counterpart.
            </summary>
            <param name="r">The SquareRank.</param>
            <returns>The logical rank.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToArtemisFile(ChessBot.Logic.File)">
            <summary>
            Converts a SquareFile to its Logical File counterpart.
            </summary>
            <param name="f">The SquareFile.</param>
            <returns>The logical file.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToArtemisRank(ChessBot.Logic.Rank)">
            <summary>
            Converts a SquareRank to its Logical Rank counterpart.
            </summary>
            <param name="r">The SquareRank.</param>
            <returns>The logical rank.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToArtemisSquare(ChessBot.Logic.Position)">
            <summary>
            Converts a logical position to an Artemis square.
            </summary>
            <param name="p">The position.</param>
            <returns>The square.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToLogicalColor(Artemis.Model.PieceColor)">
            <summary>
            Converts a PieceColor to its Logical counterpart.
            </summary>
            <param name="c">The piece color.</param>
            <returns>The logical piece color.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToArtemisColor(ChessBot.Logic.PieceColor)">
            <summary>
            Converts a logical PieceColor to its Artemis counterpart.
            </summary>
            <param name="c">The piece color.</param>
            <returns>The logical piece color.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.Opposite(Artemis.Model.PieceColor)">
            <summary>
            Returns the opposite color.
            </summary>
            <param name="color">The color to return the opposite of.</param>
            <returns>The opposite of color.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.Opposite(ChessBot.Logic.PieceColor)">
            <summary>
            Returns the opposite color.
            </summary>
            <param name="color">The color to return the opposite of.</param>
            <returns>The opposite of color.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToLogicalPieceType(Artemis.Model.PieceType)">
            <summary>
            Converts an Artemis PieceType to a logical PieceType.
            </summary>
            <param name="pieceType">The Artemis piece type.</param>
            <returns>The logical piece type.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToArtemisPieceType(ChessBot.Logic.Pieces.PieceType)">
            <summary>
            Converts a logical PieceType to its Artemis counterpart.
            </summary>
            <param name="pieceType">The logical piece type.</param>
            <returns>The Artemis piece type.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.ToArtemisPositionSquareArray(ChessBot.Logic.Board)">
            <summary>
            Converts a logical board object to an array of Artemis <see cref="T:Artemis.Model.PositionSquare" />'s.
            </summary>
            <param name="board">The logical board.</param>
            <returns>The <see cref="T:Artemis.Model.PositionSquare" /> array.</returns>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.GetDestinationSquare(ChessBot.Logic.Moves.Move)">
            <summary>
            Gets the destination square for a piece after a certain move.
            </summary>
            <param name="move">The move the piece in question is making.</param>
            <returns>The new position.</returns>
            <exception cref="T:System.ArgumentException">On an invalid move type.</exception>
        </member>
        <member name="M:Artemis.Model.LogicExtensions.GetDepartureSquare(ChessBot.Logic.Moves.Move)">
            <summary>
            Gets the departure square for a piece after a certain move.
            TODO: Make this agnostic to chess 960 variant.
            </summary>
            <param name="move">The move the piece in question is making.</param>
            <returns>The new position.</returns>
            <exception cref="T:System.ArgumentException">On an invalid move type.</exception>
        </member>
        <member name="T:Artemis.Model.ModelExtensions">
            <summary>
            Model extensions for Artemis model classes.
            </summary>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.ToShortName(Artemis.Sequences.SequenceDirection)">
            <summary>
            Converts a sequence type enum value to a short string.
            </summary>
            <param name="sequenceDirection">The sequence type.</param>
            <returns>The short string representation.</returns>
            <exception cref="T:System.ArgumentException">On an unknown sequence type.</exception>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.ToLongName(Artemis.Sequences.SequenceDirection)">
            <summary>
            Converts a sequence type enum value to a short string.
            </summary>
            <param name="sequenceDirection">The sequence type.</param>
            <returns>The short string representation.</returns>
            <exception cref="T:System.ArgumentException">On an unknown sequence type.</exception>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.ToPieceChar(Artemis.Model.PieceType,Artemis.Model.PieceColor)">
            <summary>
            Converts a sequence type enum value to a short string.
            </summary>
            <param name="pieceType">The piece type.</param>
            <param name="pieceColor">The piece color.</param>
            <returns>The single character piece character. White pieces are denoted in
            uppercase, black pieces are denoted in lowercase.</returns>
            <exception cref="T:System.ArgumentException">On an unknown sequence type.</exception>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.To1359Value(Artemis.Model.PieceType)">
            <summary>
            Gets the value of the piece using the standard value system:
            <list type="table">
              <item>
                <term>Pawn</term>
                <description>1</description>
              </item>
              <item>
                <term>Knight or Bishop</term>
                <description>3</description>
              </item>
              <item>
                <term>Rook</term>
                <description>5</description>
              </item>
              <item>
                <term>Queen</term>
                <description>9</description>
              </item>
              <item>
                <term>King</term>
                <description>∞</description>
              </item>
            </list>
            </summary>
            <param name="pieceType">The piece type to get the value of.</param>
            <returns>The piece value.</returns>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.ToRankString(Artemis.Model.SquareRank)">
            <summary>
            Coverts an Artemis rank to a string representation.
            </summary>
            <param name="rank">The rank.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.ToFileString(Artemis.Model.SquareFile)">
            <summary>
            Coverts an Artemis file to a string representation.
            </summary>
            <param name="file">The file.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.FileFromFileChar(System.Char)">
            <summary>
            Converts a file character to the Artemis file.
            </summary>
            <param name="fileChar">The file character.</param>
            <returns>The Artemis file.</returns>
        </member>
        <member name="M:Artemis.Model.ModelExtensions.RankFromRankChar(System.Char)">
            <summary>
            Converts a rank character to the Artemis file.
            </summary>
            <param name="rankChar">The rank character.</param>
            <returns>The Artemis rank.</returns>
        </member>
        <member name="T:Artemis.Model.PgnExtensions">
            <summary>
            Extension methods for manipulating PgnGame objects.
            </summary>
        </member>
        <member name="M:Artemis.Model.PgnExtensions.ToStartingBoard(ChessBot.Pgn.Model.PgnGame)">
            <summary>
            Creates a board with the pieces in the correct position for the start of the game.
            Used for games starting with a custom position (like Chess960).
            </summary>
            <param name="game">The game.</param>
            <returns>The board.</returns>
        </member>
        <member name="M:Artemis.Model.PgnExtensions.ToPlyList(System.Collections.Generic.List{ChessBot.Pgn.Model.Move})">
            <summary>
            Converts a list of moves to a list of plies.
            </summary>
            <param name="moveList">The list of moves.</param>
            <returns>The list of plies.</returns>
        </member>
        <member name="T:Artemis.Model.PieceColor">
            <summary>
            The color of a piece, white or black.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceColor.White">
            <summary>
            The white pieces.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceColor.Black">
            <summary>
            The black pieces.
            </summary>
        </member>
        <member name="T:Artemis.Model.PieceType">
            <summary>
            The type of chess piece.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceType.Pawn">
            <summary>
            A pawn.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceType.Rook">
            <summary>
            A rook.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceType.Knight">
            <summary>
            A knight.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceType.Bishop">
            <summary>
            A bishop.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceType.Queen">
            <summary>
            A queen.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceType.King">
            <summary>
            A king.
            </summary>
        </member>
        <member name="T:Artemis.Model.PieceValue">
            <summary>
            The value of a piece.
            This is unnecessary except for clearly defining that the King is priceless.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceValue.One">
            <summary>
            A piece value of 1.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceValue.Three">
            <summary>
            A piece value of 3.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceValue.Five">
            <summary>
            A piece value of 5.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceValue.Nine">
            <summary>
            A piece value of 9.
            </summary>
        </member>
        <member name="F:Artemis.Model.PieceValue.Infinity">
            <summary>
            A piece value of infinity.
            </summary>
        </member>
        <member name="M:Artemis.Model.PieceValue.#ctor(System.Nullable{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.PieceValue"/> struct for a finite piece value.
            </summary>
            <param name="val">The value of the piece. If null, piece is presumed to have infinite value.</param>
        </member>
        <member name="P:Artemis.Model.PieceValue.ApproximateFloatValue">
            <summary>
            Gets the piece value as a float. If the piece has infinite value, this returns <see cref="F:System.Single.MaxValue" />.
            </summary>
        </member>
        <member name="P:Artemis.Model.PieceValue.Infinite">
            <summary>
            Gets a value indicating whether this piece has infinite value.
            </summary>
        </member>
        <member name="M:Artemis.Model.PieceValue.op_LessThanOrEqual(Artemis.Model.PieceValue,Artemis.Model.PieceValue)">
            <summary>
            A less than or equals to operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is less than or equal to the second value.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.op_GreaterThanOrEqual(Artemis.Model.PieceValue,Artemis.Model.PieceValue)">
            <summary>
            A greater than or equals to operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is greater than or equal to the second value.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.op_GreaterThan(Artemis.Model.PieceValue,Artemis.Model.PieceValue)">
            <summary>
            A greater than operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is greater than the second value.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.op_LessThan(Artemis.Model.PieceValue,Artemis.Model.PieceValue)">
            <summary>
            A less than operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is less than the second value.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.op_Equality(Artemis.Model.PieceValue,Artemis.Model.PieceValue)">
            <summary>
            An equality check operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is equal to the second value.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.op_Inequality(Artemis.Model.PieceValue,Artemis.Model.PieceValue)">
            <summary>
            An negative equality check operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is not equal to the second value.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to this instance.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>True if the given object is equal to the current object.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.ToString">
            <summary>
            Gets the string representation of this piece value.
            </summary>
            <returns>The piece value as a string.</returns>
        </member>
        <member name="M:Artemis.Model.PieceValue.GetHashCode">
            <summary>
            Gets the hash code for this piece value.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Artemis.Model.PositionSquare">
            <summary>
            A structure similar to Square, but used for storing information about a specific square
            in a specific position, not just the coordinate location on a board.
            </summary>
        </member>
        <member name="M:Artemis.Model.PositionSquare.#ctor(Artemis.Model.Square)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.PositionSquare"/> struct for an unoccupied square.
            </summary>
            <param name="square">The square on the board.</param>
        </member>
        <member name="M:Artemis.Model.PositionSquare.#ctor(Artemis.Model.Square,Artemis.Model.PieceType,Artemis.Model.PieceColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.PositionSquare"/> struct for an occupied square.
            </summary>
            <param name="square">The square on the board.</param>
            <param name="pieceType">The type of piece occupying this square.</param>
            <param name="pieceColor">The color of the piece occupying this square.</param>
        </member>
        <member name="P:Artemis.Model.PositionSquare.Square">
            <summary>
            Gets the square on the board this object refers to.
            </summary>
        </member>
        <member name="P:Artemis.Model.PositionSquare.Rank">
            <summary>
            Gets the rank that this refers to.
            </summary>
        </member>
        <member name="P:Artemis.Model.PositionSquare.File">
            <summary>
            Gets the rank that this refers to.
            </summary>
        </member>
        <member name="P:Artemis.Model.PositionSquare.SequenceStringValue">
            <summary>
            Gets the value to use when creating a string for a sequence including this element.
            </summary>
        </member>
        <member name="P:Artemis.Model.PositionSquare.PieceType">
            <summary>
            Gets the type of piece on this square, or if this piece is unoccupied, then null.
            </summary>
        </member>
        <member name="P:Artemis.Model.PositionSquare.PieceColor">
            <summary>
            Gets the color of the piece on this square, or if this piece is unoccupied, then null.
            </summary>
        </member>
        <member name="P:Artemis.Model.PositionSquare.Occupied">
            <summary>
            Gets a value indicating whether or not this square is occupied.
            </summary>
        </member>
        <member name="T:Artemis.Model.Square">
            <summary>
            A single square on the board.
            </summary>
        </member>
        <member name="M:Artemis.Model.Square.#ctor(Artemis.Model.SquareFile,Artemis.Model.SquareRank)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Model.Square"/> struct.
            </summary>
            <param name="file">The file of the square.</param>
            <param name="rank">The rank of the square.</param>
        </member>
        <member name="P:Artemis.Model.Square.File">
            <summary>
            Gets the file this square is located at.
            </summary>
        </member>
        <member name="P:Artemis.Model.Square.Rank">
            <summary>
            Gets the rank this square is located at.
            </summary>
        </member>
        <member name="P:Artemis.Model.Square.ArrayIndex">
            <summary>
            Gets the index where this square on the board would
            be stored in a flat, one-dimensional array.
            </summary>
        </member>
        <member name="P:Artemis.Model.Square.Name">
            <summary>
            Gets the name of this square. Such as, "h4".
            </summary>
        </member>
        <member name="P:Artemis.Model.Square.SequenceStringValue">
            <summary>
            Gets the value to use when constructing a string for a sequence including this square.
            Just returns the <see cref="P:Artemis.Model.Square.Name">name</see> of this square.
            </summary>
        </member>
        <member name="P:Artemis.Model.Square.Color">
            <summary>
            Gets the color of this square on the board.
            </summary>
        </member>
        <member name="M:Artemis.Model.Square.op_Inequality(Artemis.Model.Square,Artemis.Model.Square)">
            <summary>
            An equality check operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is equal to the second value.</returns>
        </member>
        <member name="M:Artemis.Model.Square.op_Equality(Artemis.Model.Square,Artemis.Model.Square)">
            <summary>
            An equality check operator for piece value.
            </summary>
            <param name="pv1">The first value to check.</param>
            <param name="pv2">The second value to check.</param>
            <returns>True if the first value is equal to the second value.</returns>
        </member>
        <member name="M:Artemis.Model.Square.Parse(System.String)">
            <summary>
            Creates a square object from the string representation.
            <para>
            A square string representation consists of two characters, with the
            first being an uppercase or lowercase file, and the second being
            the numerical rank. For example:
            <example>a1, A1, f8, c3</example>
            are all valid squares. These, however:
            <example>4a, 7B, A9, j6</example>
            are not.
            </para>
            </summary>
            <param name="squareString">The square string.</param>
            <returns>The square.</returns>
            <exception cref="T:System.FormatException">When an invalid format for the square is given.</exception>
        </member>
        <member name="M:Artemis.Model.Square.Equals(System.Object)">
            <summary>
            Checks if the given object is equal to this instance.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>True if the given object is equal to the current object.</returns>
        </member>
        <member name="M:Artemis.Model.Square.GetHashCode">
            <summary>
            Gets the hash code for this square.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Artemis.Model.Square.ToString">
            <summary>
            Retrieves the name of this square to use as the canonical string.
            </summary>
            <returns>The <see cref="P:Artemis.Model.Square.Name">name</see> of the square.</returns>
        </member>
        <member name="T:Artemis.Model.SquareColor">
            <summary>
            The two possible colors of a square.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareColor.Light">
            <summary>
            Light-squared
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareColor.Dark">
            <summary>
            Dark-squared
            </summary>
        </member>
        <member name="T:Artemis.Model.SquareFile">
            <summary>
            A file on a chess board.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.A">
            <summary>
            The A file.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.B">
            <summary>
            The B file.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.C">
            <summary>
            The C file.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.D">
            <summary>
            The D file.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.E">
            <summary>
            The E file.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.F">
            <summary>
            The F file.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.G">
            <summary>
            The G file.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareFile.H">
            <summary>
            The H file.
            </summary>
        </member>
        <member name="T:Artemis.Model.SquareRank">
            <summary>
            A rank on a chess board.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.First">
            <summary>
            First rank.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.Second">
            <summary>
            Second rank.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.Third">
            <summary>
            Third rank.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.Fourth">
            <summary>
            Fourth rank.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.Fifth">
            <summary>
            Fifth rank.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.Sixth">
            <summary>
            Sixth rank.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.Seventh">
            <summary>
            Seventh rank.
            </summary>
        </member>
        <member name="F:Artemis.Model.SquareRank.Eighth">
            <summary>
            Eighth rank.
            </summary>
        </member>
        <member name="T:Artemis.Motif">
            <summary>
            An abstract motif (could be tactical motif, thematic motif, positional motif, or other).
            </summary>
        </member>
        <member name="P:Artemis.Motif.MoveReference">
            <summary>
            Gets or sets the reference to the game and plies where the motif takes place.
            </summary>
        </member>
        <member name="P:Artemis.Motif.Type">
            <summary>
            Gets the reference to the game and plies where the motif takes place.
            </summary>
        </member>
        <member name="T:Artemis.MotifType">
            <summary>
            Different types of motifs.
            </summary>
        </member>
        <member name="F:Artemis.MotifType.Tactical">
            <summary>
            A tactical motif (i.e. pin, skewer)
            </summary>
        </member>
        <member name="F:Artemis.MotifType.Positional">
            <summary>
            A positional motif (i.e. centralizing the queen)
            </summary>
        </member>
        <member name="F:Artemis.MotifType.Thematic">
            <summary>
            A motif specific to a particular opening
            </summary>
        </member>
        <member name="F:Artemis.MotifType.Endgame">
            <summary>
            A motif specific to the endgame, usually involving
            passed pawns.
            </summary>
        </member>
        <member name="T:Artemis.Sequences.ISequenceable">
            <summary>
            Used so that the Sequence struct can have a generic constraint restricting its use to
            just <see cref="T:Artemis.Model.Square" /> and <see cref="T:Artemis.Model.PositionSquare" />.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.ISequenceable.Rank">
            <summary>
            Gets the rank of the location this refers to.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.ISequenceable.File">
            <summary>
            Gets the file of the location this refers to.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.ISequenceable.SequenceStringValue">
            <summary>
            Gets the string representation of this sequenceable object.
            </summary>
        </member>
        <member name="T:Artemis.Sequences.Sequence`1">
            <summary>
            A small type alias for an array of squares in a single row, single column, or single diagonal.
            </summary>
            <typeparam name="T">The type of value this sequence will contain.</typeparam>
        </member>
        <member name="M:Artemis.Sequences.Sequence`1.#ctor(Artemis.Sequences.SequenceDirection,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Sequences.Sequence`1"/> struct.
            </summary>
            <param name="sequenceDirection">The direction of the sequence.</param>
            <param name="squares">The array of squares.</param>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.Direction">
            <summary>
            Gets type of sequence.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.FirstRank">
            <summary>
            Gets the rank of the first square in this sequence.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.FirstFile">
            <summary>
            Gets the file of the first square in this sequence.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.FirstSquare">
            <summary>
            Gets the first square in this sequence.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.Length">
            <summary>
            Gets the number of squares in this sequence.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.LongStringRepresentation">
            <summary>
            Gets the long-form string representation, which is the sequence type
            followed by a comma separated list of the coordinates of each position.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.ShortStringRepresentation">
            <summary>
            Gets the short-form string representation, which is the sequence type
            followed by the first square and the long square in the sequence.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence`1.Item(System.Int32)">
            <summary>
            Gets the specific square at the index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Artemis.Sequences.Sequence`1.ToArray">
            <summary>
            Returns a copy of this sequence's square array.
            </summary>
            <returns>A copy of this sequence's square array.</returns>
        </member>
        <member name="M:Artemis.Sequences.Sequence`1.GetEnumerator">
            <summary>
            Gets the enumerator for this enumerable.
            </summary>
            <returns>An enumerator for this collection of positions.</returns>
        </member>
        <member name="M:Artemis.Sequences.Sequence`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets the generic enumerator for this enumerable.
            </summary>
            <returns>An enumerator for this collection of positions.</returns>
        </member>
        <member name="T:Artemis.Sequences.Sequence">
            <summary>
            A static class containing commonly used sequences that can be reused across tactic analyzers.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence.RankSequences">
            <summary>
            Gets a list of all the sequences of squares with the same rank (e.g. all the rows).
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence.FileSequences">
            <summary>
            Gets a list of all the sequences of squares with the same file (e.g. all the columns).
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence.StraightSequences">
            <summary>
            Gets a list of all the sequences of squares in horizontal or vertical direction.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence.LightSquaredDiagonalSequences">
            <summary>
            Gets a list of all the sequences of squares along the same diagonal on light squares.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence.DarkSquaredDiagonalSequences">
            <summary>
            Gets a list of all the sequences of squares along the same diagonal on dark squares.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence.DiagonalSequences">
            <summary>
            Gets a list of all the sequences of squares along the same diagonal on either color square.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.Sequence.AllSequences">
            <summary>
            Gets a combination of all the sequences.
            </summary>
        </member>
        <member name="M:Artemis.Sequences.Sequence.FromRange(System.String)">
            <summary>
            Gets the sequence on the board based on the given range.
            <para>
            The expected format of the range string is <c>firstSquare:lastSquare</c>, where
            <c>firstSquare</c> and <c>lastSquare</c> are on the same rank, file, or diagonal.
            </para>
            <para>
            For example:
            <example>
            Sequence.FromRange("a1:a8")
            </example>
            produces a range along the A-file consisting of the squares <c>a1, a2, a3, a4, a5, a6, a7, a8</c>.
            </para>
            </summary>
            <param name="range">The range string.</param>
            <returns>The subsequence along the range.</returns>
            <exception cref="T:System.FormatException">Thrown when the input range string is not in the required format.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the input range given is not along the same rank, file, or diagonal.</exception>
        </member>
        <member name="M:Artemis.Sequences.Sequence.FromRange(Artemis.Model.Square,Artemis.Model.Square)">
            <summary>
            Creates a sequence from a start square object and an end square object.
            </summary>
            <param name="startSquare">The start square.</param>
            <param name="endSquare">The end square.</param>
            <returns>The sequence along the direction.</returns>
            <exception cref="T:System.ArgumentException">If the two squares are not on the same rank, file, or diagonal.</exception>
        </member>
        <member name="T:Artemis.Sequences.SequenceDirection">
            <summary>
            What direction the sequence is in.
            </summary>
        </member>
        <member name="F:Artemis.Sequences.SequenceDirection.Rank">
            <summary>
            Indicates all positions in the sequence are along the same rank.
            </summary>
        </member>
        <member name="F:Artemis.Sequences.SequenceDirection.File">
            <summary>
            Indicates all positions in the sequence are along the same file.
            </summary>
        </member>
        <member name="F:Artemis.Sequences.SequenceDirection.LightSquaredDiagonal">
            <summary>
            Indicates all positions in the sequence are along the same diagonal on light squares.
            </summary>
        </member>
        <member name="F:Artemis.Sequences.SequenceDirection.DarkSquaredDiagonal">
            <summary>
            Indicates all positions in the sequence are along the same diagonal on dark squares.
            </summary>
        </member>
        <member name="T:Artemis.Sequences.SequenceExtensions">
            <summary>
            Extension methods for the core <see cref="T:Artemis.Sequences.Sequence" /> type.
            </summary>
        </member>
        <member name="M:Artemis.Sequences.SequenceExtensions.Slice``1(Artemis.Sequences.Sequence{``0},System.String)">
            <summary>
            Creates a new sequence based on a portion of the original sequence.
            </summary>
            <param name="originalSequence">The original sequence to slice.</param>
            <param name="slice">The slice to take from the original sequence and put in the new sequence.
            The format of the slice is the same format that Python uses for its list slices. For the full details, see
            <see cref="T:Artemis.Sequences.SliceDescriptor"/>, or read the related <a href="">Python Documentation</a>.
            </param>
            <typeparam name="T">The type of values that the original sequence and subsequence contain.</typeparam>
            <returns>The subsequence resulting from the slice operation performed on the original sequence.</returns>
        </member>
        <member name="M:Artemis.Sequences.SequenceExtensions.Slice``1(Artemis.Sequences.Sequence{``0},Artemis.Sequences.SliceDescriptor)">
            <summary>
            Creates a new sequence based on a portion of the original sequence.
            </summary>
            <param name="originalSequence">The original sequence to slice.</param>
            <param name="sliceDescriptor">A parsed description of the slice start index,
            end index, and step parameters.
            </param>
            <typeparam name="T">The type of values that the original sequence and subsequence contain.</typeparam>
            <returns>The subsequence resulting from the slice operation performed on the original sequence.</returns>
        </member>
        <member name="T:Artemis.Sequences.SequenceUtils">
            <summary>
            Provides utility methods and extension methods for precomputed sequences, such as getting all the squares on a particular row.
            </summary>
        </member>
        <member name="M:Artemis.Sequences.SequenceUtils.ToShortSequenceString``1(Artemis.Sequences.SequenceDirection,``0[])">
            <summary>
            The short version of a sequence string.
            </summary>
            <param name="sequenceDirection">The direction the sequence is in.</param>
            <param name="positions">The position array.</param>
            <typeparam name="T">The type of element the sequence contains.</typeparam>
            <returns>The short string.</returns>
        </member>
        <member name="M:Artemis.Sequences.SequenceUtils.ToLongSequenceString``1(Artemis.Sequences.SequenceDirection,``0[])">
            <summary>
            The long version of a sequence string.
            </summary>
            <param name="st">The sequence type.</param>
            <param name="positions">The position array.</param>
            <typeparam name="T">The type of element the sequence contains.</typeparam>
            <returns>The long string.</returns>
        </member>
        <member name="M:Artemis.Sequences.SequenceUtils.CreateRankSequences">
            <summary>
            Creates the sequences of squares on a chess board that share the same rank (the rows of the board).
            </summary>
            <returns>An immutable list of these sequences.</returns>
        </member>
        <member name="M:Artemis.Sequences.SequenceUtils.CreateFileSequences">
            <summary>
            Creates the sequences of squares on a chess board that share the same file (the columns of the board).
            </summary>
            <returns>An immutable list of these sequences.</returns>
        </member>
        <member name="M:Artemis.Sequences.SequenceUtils.CreateDiagonalSequences">
            <summary>
            Creates the sequences of squares on a chess board that are along the same diagonal.
            </summary>
            <returns>An immutable list of these sequences.</returns>
        </member>
        <member name="T:Artemis.Sequences.SliceDescriptor">
            <summary>
            A parsed description of a slice to take.
            <para>
            This is parsed from the slice string input.
            The input string format follows the slice string format used by Python. It can take the
            form of any of these formats:
            </para>
            <list type="number">
            <item>
              <description>start:stop[:step]</description>
            </item>
            <item>
              <description>start:[:step]</description>
            </item>
            <item>
              <description>:stop[:step]</description>
            </item>
            </list>
            <para>
            In other words, one colon is always required to separate the start and stop indices.
            The start and stop indices are both optional - omitting them defaults the start index
            to 0, and the end index to the length of the original sequence. For example:
            <example>:5</example>
            is syntactically identical to:
            <example>0:5</example>
            Both would generate a slice starting at the beginning of the original sequence, and
            ending at the fifth element in the sequence.
            </para>
            <para>
            The start index can also be negative. For example:
            <example>-4:-2</example>
            would produce a new sequence starting from the fourth-to-last element in the original sequence, and ending
            right before the second-to-last element in the original sequence.
            </para>
            <para>
            Omitting the end index is probably the most useful slice format to use, since it will default
            to the end of the original sequence. For example:
            <example>5:</example>
            creates a slice that skips the first five values in the original sequence, but then contains
            all the remaining values. If the original slice has 10 elements, then the example above would
            product the same slice as this alternative:
            <example>5:10</example>
            </para>
            <para>
            Omitting both the start and the end values creates a slice identical to the original sequence:
            <example>:</example>
            </para>
            <para>
            The <see cref="P:Artemis.Sequences.SliceDescriptor.Step"/> parameter is always optional - the trailing colon isn't required, and when omitted,
            either implicitly (with a simple <c>start:stop</c>), or explicitly (<c>start:stop:</c>), it defaults to 1.
            </para>
            <para>
            If the step parameter is included and set to a value other than 1, it changes the number of items to advance
            to in each iteration of the sequence. If a sequence contains 10 elements, and the slice <c>2:10:2</c> is used,
            the resulting sequence will consist of items with the following indices in the original sequence:
            <code>
            2, 4, 6, 8
            </code>
            The most practical application of this is to run a sequence in reverse. By setting the step parameter to -1, the sequence
            is ran backwards. For example:
            <example>-3::-1</example>
            produces a subsequence containing everything from the original sequence except the last two elements, but reversed.
            </para>
            </summary>
        </member>
        <member name="M:Artemis.Sequences.SliceDescriptor.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Sequences.SliceDescriptor"/> struct.
            </summary>
            <param name="start">The start index for the slice.</param>
            <param name="stop">The end index for the slice.</param>
            <param name="step">The step.</param>
        </member>
        <member name="P:Artemis.Sequences.SliceDescriptor.Start">
            <summary>
            Gets the start index of the slice.
            If not present, the slice will start at the beginning.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.SliceDescriptor.Stop">
            <summary>
            Gets the stop index of the slice.
            If not present, the slice will stop at the end.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.SliceDescriptor.Step">
            <summary>
            Gets the step of the slice.
            If not present, the step defaults to 1.
            </summary>
        </member>
        <member name="M:Artemis.Sequences.SliceDescriptor.Parse(System.String)">
            <summary>
            Parse the string representation of a slice into a slice description that can be used for
            slice generation.
            </summary>
            <param name="slice">The string slice representation.</param>
            <returns>The slice description.</returns>
        </member>
        <member name="M:Artemis.Sequences.SliceDescriptor.ValidateDescriptor(System.String)">
            <summary>
            Determines if a given slice string is properly formatted.
            </summary>
            <param name="slice">The slice string.</param>
            <exception cref="T:System.FormatException">When the provided slice descriptor string is not properly formatted.</exception>
        </member>
        <member name="M:Artemis.Sequences.SliceDescriptor.ToEffectiveDescriptor``1(Artemis.Sequences.Sequence{``0})">
            <summary>
            Converts a descriptor with potentially omitted parameter
            to one with set, non-null parameters resolved relative
            to the original sequence.
            The index selection behavior is copied directly from the
            <a href="https://github.com/python/cpython/blob/522691c46e2ae51faaad5bbbce7d959dd61770df/Objects/sliceobject.c#L170">original Python source</a> to ensure exactness.
            </summary>
            <param name="originalSequence">The original sequence.</param>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <returns>The effective descriptor that will directly be used for creating the slice.</returns>
        </member>
        <member name="T:Artemis.Sequences.EffectiveSliceDescriptor">
            <summary>
            An internal class representing the actual start index, stop index,
            and step parameters after omissions are patched with default values.
            </summary>
        </member>
        <member name="M:Artemis.Sequences.EffectiveSliceDescriptor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Sequences.EffectiveSliceDescriptor"/> struct.
            </summary>
            <param name="start">The start index for the slice.</param>
            <param name="stop">The end index for the slice.</param>
            <param name="step">The step.</param>
        </member>
        <member name="P:Artemis.Sequences.EffectiveSliceDescriptor.Start">
            <summary>
            Gets the start index.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.EffectiveSliceDescriptor.Stop">
            <summary>
            Gets the stop index.
            </summary>
        </member>
        <member name="P:Artemis.Sequences.EffectiveSliceDescriptor.Step">
            <summary>
            Gets the start index.
            </summary>
        </member>
        <member name="T:Artemis.Util.HashHelpers">
            <summary>
            Utility class with hash code helpers.
            </summary>
        </member>
        <member name="M:Artemis.Util.HashHelpers.Combine(System.Int32,System.Int32)">
            <summary>
            Creates a hash code from two integer values.
            This code was borrowed from the .NET Core class <c>System.Numerics.Hashing.HashHelpers</c>.
            </summary>
            <param name="h1">First integer.</param>
            <param name="h2">Second integer.</param>
            <returns>The hash code.</returns>
        </member>
    </members>
</doc>
