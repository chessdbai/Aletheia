<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Artemis.Tactics</name>
    </assembly>
    <members>
        <member name="T:Artemis.Tactics.Attraction.Attraction">
            <summary>
            A tactic where a piece is sacrificed to pull the king in
            to deliver a decisive blow.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Attraction.Attraction.TacticType">
            <inheritdoc cref="P:Artemis.Tactics.Attraction.Attraction.TacticType" />
        </member>
        <member name="P:Artemis.Tactics.Attraction.Attraction.SacrificedPiece">
            <summary>
            Gets or sets the piece that is sacrificed to pull the king in.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Attraction.Attraction.SacrificeMove">
            <summary>
            Gets or sets the follow-up after the sacrifice.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Attraction.Attraction.CaptureMove">
            <summary>
            Gets or sets the capture move after the sacrifice.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Attraction.Attraction.FollowupMove">
            <summary>
            Gets or sets the follow-up after the sacrifice.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Attraction.AttractionAnalyzer">
            <summary>
            An analyzer capable of identifying attraction tactics.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Attraction.AttractionAnalyzer.#ctor(Artemis.Analysis.EngineEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Tactics.Attraction.AttractionAnalyzer"/> class.
            </summary>
            <param name="engineEnvironment">The engine environment.</param>
        </member>
        <member name="M:Artemis.Tactics.Attraction.AttractionAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Finds any attraction tactics in the position.
            </summary>
            <param name="position">The position.</param>
            <param name="coverageMap">The coverage map.</param>
            <returns>A list of attraction motifs.</returns>
        </member>
        <member name="T:Artemis.Tactics.Backrank.Backrank">
            <summary>
            A move that is not as good if no check made on the back rank is legal.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Backrank.Backrank.MovingPiece">
            <summary>
            Gets or sets the position of the piece that moved.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Backrank.Backrank.CapturedPiece">
            <summary>
            Gets or sets the position of the piece captured, if any.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Backrank.Backrank.BackrankingPiece">
            <summary>
            Gets or sets the position of the piece that can move after
            the moving piece if the moving piece is captured,
            leaving the backrank undefended.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Backrank.Backrank.TacticType">
            <summary>
            Gets the type of tactic. For this subclass, it is always <see cref="P:Artemis.Tactics.Backrank.Backrank.TacticType">Pin.</see>.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Backrank.BackrankAnalyzer">
            <summary>
            A move that is not as good if no check made on the back rank is legal.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Backrank.BackrankAnalyzer.#ctor(Artemis.Analysis.EngineEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Artemis.Tactics.Backrank.BackrankAnalyzer"/> class.
            </summary>
            <param name="engineEnvironment">The engine environment.</param>
        </member>
        <member name="M:Artemis.Tactics.Backrank.BackrankAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Returns a list of backrank tactics in a position.
            </summary>
            <param name="position">The position.</param>
            <param name="coverageMap">The coverage map.</param>
            <returns>The list of backrank tactics.</returns>
        </member>
        <member name="T:Artemis.Tactics.Discovery.Discovery">
            <summary>
            A discovery motif.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Discovery.Discovery.TacticType">
            <inheritdoc cref="T:Artemis.Tactics.TacticalMotif"/>
        </member>
        <member name="P:Artemis.Tactics.Discovery.Discovery.AttackedPiece">
            <summary>
            Gets or sets the piece being attacked.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Discovery.Discovery.MovedPiece">
            <summary>
            Gets or sets the piece that moved to unleash the AttackingPiece.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Discovery.Discovery.AttackingPiece">
            <summary>
            Gets or sets the piece that was unleashed to do the attacking.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Discovery.Discovery.Check">
            <summary>
            Gets or sets a value indicating whether this move puts the opponent in check.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Discovery.DiscoveryAnalyzer">
            <summary>
            Identifies discovered attacks.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Discovery.DiscoveryAnalyzer.FindDiscoveriesForMoveAndSequence(Artemis.Model.FlatPosition,Artemis.Sequences.Sequence{Artemis.Model.Square})">
            <summary>
            Find a discovery in a specific sequence.
            </summary>
            <param name="position">The position.</param>
            <param name="sequence">The sequence.</param>
            <returns>The list of discoveries in this sequence.</returns>
        </member>
        <member name="M:Artemis.Tactics.Discovery.DiscoveryAnalyzer.GetSearchSequencesForSquare(Artemis.Model.Square)">
            <summary>
            Returns a list of subsequences that consists of the subsequence in the rank direction,
            file direction, and both diagonals.
            </summary>
            <param name="square">The square.</param>
            <returns>The list of subsequences.</returns>
        </member>
        <member name="M:Artemis.Tactics.Discovery.DiscoveryAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Finds the discovery motifs in a given position.
            </summary>
            <param name="position">The position.</param>
            <param name="coverageMap">The coverage map.</param>
            <returns>The list of discoveries.</returns>
        </member>
        <member name="T:Artemis.Tactics.DoubleAttack.DoubleAttack">
            <summary>
            A motif where a piece moves and attacks two or more enemy pieces.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.DoubleAttack.DoubleAttack.TacticType">
            <inheritdoc cref="T:Artemis.Tactics.TacticalMotif" />
        </member>
        <member name="P:Artemis.Tactics.DoubleAttack.DoubleAttack.MovedPiece">
            <summary>
            Gets or sets the piece that moved to create multiple attacks.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.DoubleAttack.DoubleAttack.AttackedPieces">
            <summary>
            Gets or sets the list of attacked piece. While this is usually only
            two pieces (a double attack or a fork), it could also be three or more
            pieces (a triple attack, or a thork, which is definitely a thing).
            </summary>
        </member>
        <member name="T:Artemis.Tactics.DoubleAttack.DoubleAttackAnalyzer">
            <summary>
            An analyzer to identify Double Attacks in a position.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.DoubleAttack.DoubleAttackAnalyzer.GetMovedPieceCapturedMoves(Artemis.Model.FlatPosition)">
            <summary>
            Gets a list of captures that the piece that just move could make.
            </summary>
            <param name="position">The position.</param>
            <returns>The list of captures that the piece that just move could make if
            it could go twice in a row.</returns>
        </member>
        <member name="M:Artemis.Tactics.DoubleAttack.DoubleAttackAnalyzer.IsPieceOutnumberedInPosition(Artemis.Model.FlatPosition,Artemis.Model.PositionSquare,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Determines if an enemy piece has more attackers than defenders in a position.
            </summary>
            <param name="position">The position.</param>
            <param name="piece">The piece to count attackers vs defenders.</param>
            <param name="coverageMap">The coverage map.</param>
            <returns>Whether or not a particular piece is outnumbered.</returns>
        </member>
        <member name="M:Artemis.Tactics.DoubleAttack.DoubleAttackAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Finds all the double attacks in the position.
            </summary>
            <param name="position">The position.</param>
            <param name="coverageMap">The coverage map.</param>
            <returns>The list of double attacks.</returns>
        </member>
        <member name="T:Artemis.Tactics.Endgame.Breakthrough">
            <summary>
            A tactic where several pawns are moved to create a passed pawn.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Endgame.Breakthrough.TacticType">
            <inheritdoc cref="T:Artemis.Tactics.TacticalMotif" />
        </member>
        <member name="P:Artemis.Tactics.Endgame.Breakthrough.SacrificedPawns">
            <summary>
            Gets or sets the list of sacrificed pawns (along with the
            move number (relative to the motif start position) they occur).
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Endgame.Breakthrough.PassedPawn">
            <summary>
            Gets or sets the pawn that becomes passed (and the move number
            that it becomes passed (relative to the motif start position)).
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Endgame.BreakthroughAnalyzer">
            <summary>
            An analyzer to find pawn breakthroughs leading to a passed pawn.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Endgame.BreakthroughAnalyzer.FindMotifsAsync(Artemis.Model.FlatGame)">
            <inheritdoc cref="T:Artemis.IMotifAnalyzer" />
        </member>
        <member name="T:Artemis.Tactics.Endgame.PassedPawnUtils">
            <summary>
            Utility class with useful methods for passed-pawn related tactics.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Endgame.PassedPawnUtils.IsPotentialRunnerAnActualRunner(Artemis.Model.FlatPosition,Artemis.Model.PositionSquare,Artemis.Model.PositionSquare)">
            <summary>
            Determines whether the path for a potential runner to
            make diagonal contact with a keeper is clear.
            </summary>
            <param name="position">The chess position.</param>
            <param name="runnerPawnSquare">The runner pawn square.</param>
            <param name="keeperPawnSquare">The keeper pawn square.</param>
            <returns>True if the runner pawn has nothing in between itself and the keeper pawn diagonal.</returns>
        </member>
        <member name="M:Artemis.Tactics.Endgame.PassedPawnUtils.FindPotentialRunners(Artemis.Model.FlatPosition,Artemis.Model.PositionSquare)">
            <summary>
            Finds all the pawns that the given pawn is preventing from being a passed pawn.
            </summary>
            <param name="position">The position of the board.</param>
            <param name="square">The square containing a pawn.</param>
            <returns>The list of potential runners.</returns>
        </member>
        <member name="M:Artemis.Tactics.Endgame.PassedPawnUtils.IsPawnPassed(Artemis.Model.FlatPosition,Artemis.Model.PositionSquare)">
            <summary>
            Determines whether a pawn in a given position is a passed pawn.
            </summary>
            <param name="position">The current position of the board.</param>
            <param name="square">The square of the pawn.</param>
            <returns>True if the pawn is passed.</returns>
        </member>
        <member name="T:Artemis.Tactics.Endgame.Underpromotion">
            <summary>
            A tactic where a pawn promotes to a piece other than a queen.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Endgame.Underpromotion.TacticType">
            <inheritdoc cref="T:Artemis.Tactics.TacticalMotif" />
        </member>
        <member name="P:Artemis.Tactics.Endgame.Underpromotion.PromotingPawn">
            <summary>
            Gets or sets the position square of the promoting pawn.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Endgame.Underpromotion.PromotedPiece">
            <summary>
            Gets or sets the position square of the piece that the pawn
            promoted to.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Endgame.UnderpromotionAnalyzer">
            <summary>
            An analyzer to identify underpromotion tactics.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Endgame.UnderpromotionAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Find under-promotion tactics in a position.
            </summary>
            <param name="position">The position.</param>
            <param name="coverageMap">The coverage map.</param>
            <returns>The list of underpromotions.</returns>
        </member>
        <member name="T:Artemis.Tactics.Pins.Pin">
            <summary>
            A situation where one side is attacking another's sides piece A, and a piece B
            of higher value makes it disadvantageous, or even illegal, for them to move piece A.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Pins.Pin.PinningPiece">
            <summary>
            Gets or sets the position of the piece doing the pinning.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Pins.Pin.PinnedPiece">
            <summary>
            Gets or sets the position of the piece being pinned.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Pins.Pin.ValuablePiece">
            <summary>
            Gets or sets the position of the valuable piece who enabled this pin.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Pins.Pin.PinType">
            <summary>
            Gets or sets the type of pin, relative or absolute.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Pins.Pin.TacticType">
            <summary>
            Gets the type of tactic. For this subclass, it is always <see cref="P:Artemis.Tactics.Pins.Pin.TacticType">Pin.</see>.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Pins.PinAnalyzer">
            <summary>
            Finds instances of the "Pin" tactical motif.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Pins.PinAnalyzer.IdentifyPinsInPosition(Artemis.Model.FlatPosition)">
            <summary>
            Identifies a list of pins in a position.
            </summary>
            <param name="position">The position to search for pins in.</param>
            <returns>A list of pins found.</returns>
        </member>
        <member name="M:Artemis.Tactics.Pins.PinAnalyzer.IdentifyPinsInSequenceAndPosition(Artemis.Sequences.Sequence{Artemis.Model.PositionSquare},Artemis.Model.FlatPosition)">
            <summary>
            Uses easy to compute criteria to determine if this sequence might have a pin.
            More exhaustive checks are done only on sequences that pass this first test.
            </summary>
            <param name="sequence">The sequence to search for pins.</param>
            <param name="position">The current position of the board. Needed for context about the pinned piece.</param>
            <returns>False if we know for certain the sequence cannot contain a pin.</returns>
        </member>
        <member name="M:Artemis.Tactics.Pins.PinAnalyzer.GeneratePotentialSubsequences(Artemis.Sequences.Sequence{Artemis.Model.PositionSquare})">
            <summary>
            For each sequare in this sequence, examine the piece occupying that
            square (if any). If the piece is a valid piece type for this sequence type,
            then up to two subsequences are added:
            <list type="number">
            <item>
              <description>Starting with the potentially pinning piece, going to the end of the sequence.</description>
            </item>
            <item>
              <description>Starting with the potentially pinning piece, going backwards to the start of the sequence.</description>
            </item>
            </list>
            </summary>
            <param name="sequence">The full sequence to split into potential subsequences for pin analysis.</param>
            <returns>A list of the identified subsequences for further analysis.</returns>
        </member>
        <member name="M:Artemis.Tactics.Pins.PinAnalyzer.FindPinOrNull(Artemis.Sequences.Sequence{Artemis.Model.PositionSquare})">
            <summary>
            Finds a pin, if there is one present, in the subsequence.
            </summary>
            <param name="seq">The subsequence to check for a pin, where the first element
            is occupied by the piece doing the pinning.</param>
            <returns>The pin object if a pin is found. Otherwise, null.</returns>
        </member>
        <member name="M:Artemis.Tactics.Pins.PinAnalyzer.IsPinPreventingPieceFromOtherwiseMoving(Artemis.Tactics.Pins.Pin,Artemis.Model.FlatPosition)">
            <summary>
            Checks if an already-identified pin is actually preventing a piece from moving. In other words, is the set
            of legal moves for the pinned piece bigger if the pin was removed?.
            </summary>
            <returns>True if the pin is actually restricting the movement of the pinned piece.</returns>
            <param name="pin">The identified pin.</param>
            <param name="position">The current position.</param>
        </member>
        <member name="M:Artemis.Tactics.Pins.PinAnalyzer.DoesMoveInPositionAllowPinningPieceToCaptureValuablePiece(Artemis.Tactics.Pins.Pin,Artemis.Model.FlatPosition,ChessBot.Logic.Moves.Move)">
            <summary>
            Determines whether a given move for the pinned piece would allow the pinning piece
            to capture the valuable piece. If a pin doesn't actually restrict the "ability" for
            a piece to move (without material loss or making an illegal move for relative and
            absolute pins respectively), then it isn't really a pin by human standards.
            </summary>
            <param name="pin">The identified pin.</param>
            <param name="position">The state of the board.</param>
            <param name="move">The move to test.</param>
            <returns>True if the given move allows the capture.</returns>
        </member>
        <member name="M:Artemis.Tactics.Pins.PinAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Finds all the pins in a position.
            </summary>
            <param name="position">The position.</param>
            <param name="attackDictionary">The attack dictionary.</param>
            <returns>A list of pins.</returns>
        </member>
        <member name="T:Artemis.Tactics.Pins.PinType">
            <summary>
            The type of pin identified in a position.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.Pins.PinType.Absolute">
            <summary>
            A pin where a piece is attacked that cannot
            legally move (i.e. involving the King).
            </summary>
        </member>
        <member name="F:Artemis.Tactics.Pins.PinType.Relative">
            <summary>
            A pin where a piece is attacked that can legally move,
            but whose doing so will cost material
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Skewer.Skewer">
            <summary>
            A skewer tactic.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Skewer.Skewer.SkeweringPiece">
            <summary>
            Gets or sets the position of the piece performing the skewer.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Skewer.Skewer.SkeweredPiece">
            <summary>
            Gets or sets the position of the piece being skewered.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Skewer.Skewer.CasualtyPiece">
            <summary>
            Gets or sets the position of the piece behind the skewered piece.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.Skewer.Skewer.TacticType">
            <summary>
            Gets the type of tactic. For this subclass, it is always <see cref="P:Artemis.Tactics.Skewer.Skewer.TacticType">Skewer.</see>.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Skewer.SkewerAnalyzer">
            <summary>
            Identifies skewers in the position.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Skewer.SkewerAnalyzer.IdentifySkewersInPosition(Artemis.Model.FlatPosition)">
            <summary>
            Identifies a list of pins in a position.
            </summary>
            <param name="position">The position to search for pins in.</param>
            <returns>A list of pins found.</returns>
        </member>
        <member name="M:Artemis.Tactics.Skewer.SkewerAnalyzer.IdentifySkewersInSequenceAndPosition(Artemis.Sequences.Sequence{Artemis.Model.PositionSquare},Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Uses easy to compute criteria to determine if this sequence might have a skewer.
            More exhaustive checks are done only on sequences that pass this first test.
            </summary>
            <param name="sequence">The sequence to search for skewer.</param>
            <param name="position">The current position of the board. Needed for context about the pinned piece.</param>
            <param name="coverageMap">If already computed, the coverage map. Otherwise will be computed.</param>
            <returns>False if we know for certain the sequence cannot contain a skewer.</returns>
        </member>
        <member name="M:Artemis.Tactics.Skewer.SkewerAnalyzer.GeneratePotentialSubsequences(Artemis.Sequences.Sequence{Artemis.Model.PositionSquare})">
            <summary>
            For each sequare in this sequence, examine the piece occupying that
            square (if any). If the piece is a valid piece type for this sequence type,
            then up to two subsequences are added:
            <list type="number">
            <item>
              <description>Starting with the potentially pinning piece, going to the end of the sequence.</description>
            </item>
            <item>
              <description>Starting with the potentially pinning piece, going backwards to the start of the sequence.</description>
            </item>
            </list>
            </summary>
            <param name="sequence">The full sequence to split into potential subsequences for pin analysis.</param>
            <returns>A list of the identified subsequences for further analysis.</returns>
        </member>
        <member name="M:Artemis.Tactics.Skewer.SkewerAnalyzer.FindSkewerOrNull(Artemis.Sequences.Sequence{Artemis.Model.PositionSquare})">
            <summary>
            Finds a pin, if there is one present, in the subsequence.
            </summary>
            <param name="seq">The subsequence to check for a pin, where the first element
            is occupied by the piece doing the pinning.</param>
            <returns>The pin object if a skewer is found. Otherwise, null.</returns>
        </member>
        <member name="M:Artemis.Tactics.Skewer.SkewerAnalyzer.DoesCasualtyPieceHaveLessDefendersThanAttackersAfterSkeweredPieceMoves(Artemis.Tactics.Skewer.Skewer,Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Checks the attacker map to see if the skewer actually had much of an effect.
            It isn't a skewer if the casualty piece can't be captured by the skewering piece.
            </summary>
            <param name="skewer">The identified skewer.</param>
            <param name="position">The state of the board.</param>
            <param name="coverageMap">The coverage map for the skewering side.</param>
            <returns>True if the given move allows the capture.</returns>
        </member>
        <member name="M:Artemis.Tactics.Skewer.SkewerAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Finds all the skewers in a position.
            </summary>
            <param name="position">The position.</param>
            <param name="attackDictionary">The attack dictionary.</param>
            <returns>A list of pins.</returns>
        </member>
        <member name="T:Artemis.Tactics.SnapshotAnalyzer">
            <summary>
            A helpful base class for analyzers that only need to look at individual positions.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.SnapshotAnalyzer.FindMotifsAsync(Artemis.Model.FlatGame)">
            <summary>
            Implements the FindMotifs method by calling FindMotifsInPosition for each position.
            </summary>
            <param name="game">The game.</param>
            <returns>A list of motifs as found in each position.</returns>
        </member>
        <member name="M:Artemis.Tactics.SnapshotAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition)">
            <summary>
            Finds motifs in a given position.
            </summary>
            <param name="position">The position to look for motifs in.</param>
            <returns>An awaitable task with a result containing the list of identified motifs.</returns>
        </member>
        <member name="M:Artemis.Tactics.SnapshotAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            A method to be implemented that finds motifs in a single position.
            </summary>
            <param name="position">The position.</param>
            <param name="coverageMap">A dictionary from each square to the number
            of attackers on that square by the side to move.</param>
            <returns>A list of applicable motifs.</returns>
        </member>
        <member name="T:Artemis.Tactics.TacticalMotif">
            <summary>
            A tactical motif involving winning material or mating.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.TacticalMotif.Type">
            <summary>
            Gets the motif type. For this subclass, it is always Tactical.
            </summary>
        </member>
        <member name="P:Artemis.Tactics.TacticalMotif.TacticType">
            <summary>
            Gets the type of tactical motif.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.TacticalMotifAnalyzer">
            <summary>
            A motif analyzer for tactics.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.TacticalMotifAnalyzer.FindMotifsAsync(Artemis.Model.FlatGame)">
            <summary>
            Finds tactical motifs in a PGN game.
            </summary>
            <param name="game">The PGN game.</param>
            <returns>A list of found motifs.</returns>
        </member>
        <member name="T:Artemis.Tactics.TacticType">
            <summary>
            The type of tactic.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Attraction">
            <summary>
            A move that forces an opponents piece to move before another tactic.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Backrank">
            <summary>
            A move that is not as good if no check made on the back rank is legal.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Breakthrough">
            <summary>
            A tactic that results in the creation of a passed pawn.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Deflection">
            <summary>
            Removing the Guard without a capture.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.DiscoveredAttack">
            <summary>
            Any time a piece is moved that generates a threat of a beneficial capture as defined by the engine.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.DoubleAttack">
            <summary>
            Move that attacks two things.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Intermezzo">
            <summary>
            Material sacrifice that is in between the attacker and defender.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Interference">
            <summary>
            An in between move.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Pin">
            <summary>
            A pin.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.RemovingTheGuard">
            <summary>
            A sequence of moves that, in reverse order, does not allow winning material.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Skewer">
            <summary>
            Attacking a higher valued piece so that a lower valued piece behind can be captured.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Underpromotion">
            <summary>
            A underpromotion that is the only best move.
            </summary>
        </member>
        <member name="F:Artemis.Tactics.TacticType.Zugzwang">
            <summary>
            Putting the opponent into a position where the only non-losing
            is to skip (if that were legal).
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Zugzwang.Zugzwang">
            <summary>
            A tactic where one side makes a move that causes all legal moves for the other color to be bad,
            meaning that if they could pass, passing would be the best move.
            </summary>
        </member>
        <member name="T:Artemis.Tactics.Zugzwang.ZugzwangAnalyzer">
            <summary>
            An analyzer to identify Zugzwang motifs in a given position.
            </summary>
        </member>
        <member name="M:Artemis.Tactics.Zugzwang.ZugzwangAnalyzer.FindMotifsInPositionAsync(Artemis.Model.FlatPosition,System.Collections.Generic.IDictionary{Artemis.Model.Square,System.Int32})">
            <summary>
            Finds all the zugzwang motifs in a given position.
            </summary>
            <param name="position">The position.</param>
            <param name="coverageMap">The coverage map.</param>
            <returns>A list of zugzwang motifs.</returns>
        </member>
    </members>
</doc>
